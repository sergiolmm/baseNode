name: learn-github-actions
run-name: ${{ github.actor }} is learning GitHub Actions

on: 
  push:
    branches:
      - main


env:
  AZURE_WEBAPP_NAME: "devOpsCTC"    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "Application"      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.12.1' #'8.11.1'                # set this to the node version to use
  RESOURCEGROUPNAME: "devOpsCTC-rg"
  LOCATION: "South Central US"
  HOSTINGPLANNAME: "devOpsCTC-plan"
  APPINSIGHTLOCATION: "South Central US"
  SKU: "S1 Standard"
  DATABASEACCOUNTID: "devopsctc"
  DATABASEACCOUNTLOCATION: "eastasia"


jobs:
  check-bats-version:
    runs-on: ubuntu-latest

    steps:
    - name : Get output
      run: echo "The output parameter is set to ${{ steps.output-parameter-setter.outputs.OUTPUT_PARAM }}"

    - name: Show the demo running
      env:
          VAR1: This is
          VAR2: A Demo of
          VAR3: GitHub Actions
          VAR4: Workflow jobs
      run: |
          echo $VAR1 $VAR2 $VAR3 $VAR4.


    - uses: actions/checkout@v2

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1  # v1 old node version
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: npm install and build
      continue-on-error: false
      run: |
        cd Application
        npm install
        npm run build --if-present

    - name: Run unit tests
      continue-on-error: false
      run: |
        cd test
        npm install
        gulp name

    - name: Creating artifact directories
      run: |
        mkdir buildartifacts
        mkdir deploymenttemplates


    # Archieve build artifact
    - name: Archive Application
      run: |
        zip -qq -r ./buildartifacts/Application.zip ./Application

    # uploading application to build artifact
    - name: Upload Application to Build Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: buildartifacts
        path: buildartifacts

    # Archive Arm templates
    - name: Archive ArmTemplates
      run: |
        zip -qq -r ./deploymenttemplates/armtemplates.zip ./armTemplates

    # uploading Arm Templates to artifacts
    - name: Upload Arm templates to Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: deploymenttemplates
        path: deploymenttemplates
        
  Deploy:
    name: Deploy to azure web app
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Downloading build artifact
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts

    # Uzipping build artifacts
    - name: Unzipping Build artifact
      run: |
        unzip -qq ./buildartifacts/Application.zip -d .

  # Downloading Arm Templates
    - name: Download Arm template
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: deploymenttemplates
        path: deploymenttemplates

    # Uzipping Arm template directory
    - name: Unzipping ARM artifact
      run: |
        unzip -qq ./deploymenttemplates/armtemplates.zip -d .

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy Arm template
    - name: Deploy ARM Template
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./armTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}" databaseAccountId="${{ env.DATABASEACCOUNTID }}" databaseAccountLocation="${{ env.DATABASEACCOUNTLOCATION }}"

    - name: Fetch connection strings
      id: getConnectionStrings
      run: |
        sudo chmod  766 ./Application/connectionData.json
        echo "::set-output name=connectionstrings::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        echo "::add-mask::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        
    - name: Update connection string   
      uses: microsoft/variable-substitution@v1 
      with:
        files: './Application/connectionData.json'
      env:
        connectionString: "${{ steps.getConnectionStrings.outputs.connectionstrings }}"
          
    # Deploy web app
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
